#!/usr/bin/env python
import rospy
import tf
import tf.transformations as tftr

from youbot_arm_kinematics.srv import IK
from sensor_msgs.msg import JointState

from youbot_arm_kinematics.kinematics import Kinematics
from youbot_arm_kinematics.dh_parameters import YouBotDHParameters


class IKinematics:

    def __init__(self):
        self.pubJointState = rospy.Publisher("joint_states", JointState,
                                             queue_size=1)
        self.ks = Kinematics(YouBotDHParameters.DH_A, YouBotDHParameters.DH_ALPHA,
                             YouBotDHParameters.DH_D, YouBotDHParameters.DH_THETA)
        self.loop()

    def handle(self, req):
        xyz = req.xyz
        rpy = req.rpy
        qtn = tftr.quaternion_from_euler(rpy[0], rpy[1], rpy[2])

        # set transformation to tool_link
        br = tf.TransformBroadcaster()
        br.sendTransform(xyz, qtn, rospy.Time.now(), 'tool_link', "ground_link")

        # solve IK problem
        q, soluts = self.ks.inverse(xyz, rpy)
        if soluts != [False, False]:
            # select first solve from two
            rospy.loginfo("found Qs: %s" % str(q))
            q = q[0]

            # publish joint positions
            jointState = JointState()
            jointState.header.stamp = rospy.Time.now()
            jointState.name = ['arm_joint_'+ str(i+1) for i in range(5)]
            jointState.name.extend(['gripper_finger_joint_l', 'gripper_finger_joint_r'])
            jointState.position = q.tolist()
            # add positions for fingers of gripper
            jointState.position.extend([0.015, 0.015])
            self.pubJointState.publish(jointState)
            return 1
        return 0

    def loop(self):
        rospy.init_node('ik_test')
        rospy.Service('ik', IK, self.handle)
        print "Ready to set pos and ori. Run 'rosservice call /ik ''"
        rospy.spin()

if __name__ == "__main__":
    IKinematics()
